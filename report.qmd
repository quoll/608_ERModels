---
title: "HW2 - Entity Relation Models"
format: html
author: "Paula Gearon"
url: "https://quoll.github.io/608_ERModels/report.html"
github: "https://github.com/quoll/608_ERModels/"
indexreport: "https://quoll.github.io/608_ERModels/"
toc: true
---
# ER Diagrams
This report is available on [Github]({{< meta url >}}), along with the [sources]({{< meta github >}}).

A cleaner version of this report with embedded images is [also available]({{< meta indexreport >}}).

## Common Design Principles
Almost every entity in the following systems includes an `ID` attribute. Since no other constraints are mentioned, these are presumed to be integer types, which also makes them efficient to use as the primary key for their entity. The Primary Key also implies `NOT NULL` in schemas, so this is not included for those attributes.

Each model also includes entities that represent people. In each case, a `name` attribute is described. Names in the USA are always broken down into at least a "first" name and a "last" name, so the `name` is a composite attribute made up of these 2 sub-attributes.

Most attributes are required, and will be `NOT NULL`. When an attribute can be `NULL` this will be explained in the discussion for the model.

String attributes are generally set to `VARCHAR(64)` as this covers most names. The exceptions are described.

## Mermaid and Dot Limitations
The requirements of this project specify using Mermaid for rendering Crow's Foot ER diagrams, and Graphviz for Chen ER diagrams.

## Primary Keys
Primary keys are typically indicated on both diagram formats by underlining the attribute(s), but this is not available in Mermaid or Graphviz.

Mermaid can indicate a Primary key with a `PK` annotation. However, when this option is used, it requires that an attribute be fully described, including the domain of the attribute. The domain is not typically shown in Crow's Foot notation, but it has been included here so that the primary key annotation can be included.

To indicate a Primary Key in Graphviz, an asterisk character (*) is added to the attribute name.

## Composite Attributes
Composite attributes such as `name` are shown on a Crow's Foot diagram by showing the parts of the attribute in parentheses after the primary attribute name. For instance the `name` attribute is shown as: `name(first,last)`

This syntax is not legal in Mermaid diagrams. To overcome this, the parts of composite attributes are displayed separately, separated from the primary attribute name with an underscore character (_): `name_first`, `name_last`. This is continued in the schemas.

Because underscores are used to indicate composite attributes, identifiers made of multiple words use `camelCase` to join the words into a single identifier.

## Total Participation
Total participation is shown in Chen digrams as a double line. Unfortunately, Graphviz does not provide a double-line option. This document uses a pair of lines between nodes in the Graphviz Chen diagrams to approximate a total participation. This is not ideal, but it provides some of the desired information.

## Schema
The precise form of the Schema has not been described beyond the description:

*entity(* primary key*, attributes ...)* 

Since this does not explain if there is more structure available, a common structured schema description has been adopted that expands on what has been described. Some of the other features are. 
* data types
* foreign keys are references
* default values
* comments

This looks similar to SQL, which makes it readable for database engineers, though it doest not precisely conform to any DDL.

## Library Design
### Domain Description
> Picture a library that needs to manage books, members, and loans. Each book has a book ID, title, and author. Members have a member ID, name, and membership date. Loans have a loan ID, loan date, and return date. A member can borrow multiple books, and each book can be borrowed by multiple members over time. Each loan is associated with a single member borrowing a single book.

### Discussion
The description specifies 3 concepts that can be modelled as entities: **Books**, **Members** and **Loans**. The basic attributes of each are also described. While many of the data types for these attributes can be inferred, a couple of decisions need to be made.

While the `loanDate` of a `Loan` is established upon creation of the loan and is therefore required, the `returnDate` can only be entered when the book is returned, so it can be `NULL`.

The `Member` entity includes a `name` attribute, which is a composite attribute made of `first` and `last`, as discused above.

The `title` of a `Book` is given more space than usual, since some book titles can include multiple words and may be long.

#### Relationships
A `Loan` describes a `Book` being lent to a `Member`. The relationships are therefore described in relation to the `Loan` entity. A `Loan` `lends` a `Book`, and a `Loan` lends `to_member` for a `Member`. The word "to" may be more in line with an English sentence, but this would make the relationship label less understandable in the context of a database table.

A `Loan` only exists in the context of lending a single `Book` to a single `Member`, so the both the `Book` and the `Member` are "1-and-only-1" in their relationship to a `Loan`. The participation of a `Loan` in these relationships is mandatory, since the `Loan` cannot exist without these relationships.

Conversely, both `Book` and `Member` entities may exist without having participated in a loan (e.g. a `Book` has just been purchased, or a `Member` has just joined). Therefore, their participation in a loan relationship is optional. Also, both `Book` and `Member` may be involved in multiple loans, giving them multiple cardinality in these relationships. So both have a "zero-or-many" relationship to `Loan`.

### Library Crow's Foot
```{mermaid}
---
title: Library Crow's Foot Diagram
---
erDiagram
    Loan }o--|| Book : lends
    Loan }o--|| Member : toMember
    Loan {
        int loanID PK
        date loanDate
        date returnDate
    }
    Book {
        int bookID PK
        string title
        string author
    }
    Member {
        int memberID PK
        string name_first
        string name_last
        date membershipDate
    }
```
See [Library Crow's Foot Diagram](https://quoll.github.io/608_ERModels/diagrams/LibraryCF.png) for a more a more standardized view.

### Library Chen Diagram
```{dot}
graph ER {
	fontname="Helvetica,Arial,sans-serif"
	node [fontname="Helvetica,Arial,sans-serif"]
	edge [fontname="Helvetica,Arial,sans-serif"]
	layout=neato
	node [shape=box]; Loan; Book; Member;
    node [shape=ellipse]; {node [label="name"] name0;}
		{node [label="*bookID"] bookID;}  title; author; {node [label="*loanID"] loanID;} loanDate; returnDate; {node [label="*memberID"] memberID;}; membershipDate; first; last
    node [shape=diamond,style=filled,color=lightgrey]; lends; toMember;

    bookID -- Book;
    title -- Book;
    author -- Book;
    Book -- lends [label="1",len=1.00];
    lends -- Loan;
    lends -- Loan [label="M",len=1.00];
    Loan -- loanID;
    Loan -- loanDate;
    Loan -- returnDate;
    Loan -- toMember;
    Loan -- toMember [label="M",len=1.00];
    toMember -- Member  [label="1",len=1.00];
    Member -- memberID;
    Member -- name0;
    Member -- membershipDate;
    name0 -- first;
    name0 -- last
}
```
See [Library Chen Diagram](https://quoll.github.io/608_ERModels/diagrams/LibraryChen.png) for a more a more standardized view.

### Schema
* `Loan(`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        loanID INT PRIMARY KEY,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        loanDate DATE NOT NULL DEFAULT CURRENT_DATE,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        returnDate DATE,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        toMember INT NOT NULL REFERENCES Member(memberID),`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        lends INT NOT NULL REFERENCES Book(bookID)`<br>`
    )`
* `Member(`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        memberID INT PRIMARY KEY,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        name_first VARCHAR(64) NOT NULL,  -- part of name`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        name_last VARCHAR(64) NOT NULL,   -- part of name`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        membershipDate DATE NOT NULL`<br>`
    )`
* `Book(`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        bookID INT PRIMARY KEY,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        title VARCHAR(64) NOT NULL,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        author VARCHAR(128) NOT NULL`<br>`
    )`

## Hotel Design
### Domain Description
> Consider a hotel that wants to manage rooms, guests, and bookings. Each room has a room number, type, and rate. Guests have a guest ID, name, and contact information. Bookings have a booking ID, check-in date, and check-out date. A guest can make multiple bookings, and each room can be booked multiple times over different dates. Each booking is associated with one guest and one room.

### Discussion
The description specifies 3 concepts that can be modelled as entities: **Room**, **Guest** and **Booking**. The basic attributes of each are also described.

As before, the `name` attribute of the `Guest` entity is composite, and includes both `first` and `last` component attributes. The "contact information" for a guest has been named `address` and is also composite. This includes the typical fields that are included in a person's address, including up to two lines for the street and other information, a `city` (or county) name, a `state`, a `zip` for the postal code, and a `phone` number. All of these are left as text, since people travelling from non-USA locations may have contact information that does not conform to the usual structures found in the USA.

The address sub-components have some variations from the standard. While the first address line is always required, the second may be left as `NULL`. Both of these lines can occasionally require very long strings, so these are doubled to `VARCHAR(128)`. The `zip` (or post code) is almost universally short, as are phone numbers, even with area codes, formatting, and extensions. So these are set to shorter `VARCHAR(32)` strings.

The `Room` entity includes a rate that indicates a price for a single night of accommodation. This requires 2 decimal places to indicate cents, but it is not appropriate to represent this as a floating point number, since floating point representations do not accurately represent 2 decimal places precisely. Instead, a `numeric` domain is selected, since most databases support this for currency information.

The `type` on `Room` entities is likely to be only 1 to 2 words, so this is short as well.

Unlike most entities in these models, `Room`s do not have an ID, but instead have a unique `roomNumber`. This is expected to be an integer.

The `checkIn` and `checkOut` attributes for the `Booking` are in the "date" domain. Both of these are set when the booking is made, for planning purposes, and are never `NULL`.

#### Relationships
A `Booking` describes a single `Guest` staying in a single `Room`. Since this defines the `Booking`, the relationships are described from the perspective of that entity. The `Booking` is `forGuest` of a single `Guest`, and `forRoom` of a single `Room`. Consequently, the `Guest` and `Room` entities have "1-and-only-1" cardinalities for these relationships. The `Booking` participation in these relationships is mandatory.

A `Room` may be booked multiple times, though it is feasible that a `Room` has never been booked (especially early after the hotel has been opened). So a `Room` has optional participation in the `forRoom` relationship, and the cardinality of the reference to `Booking` is "zero-or-many".

A `Guest` may stay multiple times at the hotel, however, they will not be entered into the database until they make their first booking. Consequently, a `Guest` is mandatory in the `forGuest` relationship, and the cardinality is "one-or-many".

### Hotel Crow's Foot
```{mermaid}
---
title: Hotel Crow's Foot Diagram
---
erDiagram
    Booking }o--|| Room : forRoom
    Booking }|--|| Guest : forGuest
    Booking {
        int bookingID PK
        date checkIn
        date checkOut
    }
    Room {
        int roomNumber PK
        string type
        numeric rate
    }
    Guest {
        int guestID PK
        string name_first
        string name_last
        string address_line1
        string address_line2
        string address_city
        string address_state
        string address_zip
        string address_phone
    }
```
See [Hotel Crow's Foot Diagram](https://quoll.github.io/608_ERModels/diagrams/HotelCF.png) for a more a more standardized view.

### Hotel Chen Diagram
```{dot}
graph ER {
	node [shape=box]; Booking; Room; Guest;
    node [shape=ellipse]; {node [label="name"] name0;}
		{node [label="*roomNumber"] roomNumber;} {node [label="*bookingID"] bookingID;} {node [label="*guestID"] guestID;} type; rate; checkIn; checkOut; first; last; address; line1; line2; city; state; zip; phone;
    node [shape=diamond,style=filled,color=lightgrey]; forRoom; forGuest;

    roomNumber -- Room;
    type -- Room;
    rate -- Room;
    Room -- forRoom [label="1",len=1.00];
    forRoom -- Booking;
    forRoom -- Booking [label="M",len=1.00];
    Booking -- bookingID;
    Booking -- checkIn;
    Booking -- checkOut;
    Booking -- forGuest;
    Booking -- forGuest [label="M",len=1.00];
    forGuest -- Guest;
    forGuest -- Guest  [label="1",len=1.00];
    Guest -- guestID;
    Guest -- name0;
    name0 -- first;
    name0 -- last;
    Guest -- address;
    address -- line1;
    address -- line2;
    address -- city;
    address -- state;
    address -- zip;
    address -- phone;
}
```
See [Hotel Chen Diagram](https://quoll.github.io/608_ERModels/diagrams/HotelChen.png) for a more a more standardized view.

### Schema
* `Booking(`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        bookingID INT PRIMARY KEY,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        checkIn DATE NOT NULL,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        checkOut DATE NOT NULL,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        forGuest INT NOT NULL REFERENCES Guest(guestID),`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        forRoom INT NOT NULL REFERENCES Room(roomNumber)`<br>`
    )`
* `Guest(`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        guestID INT PRIMARY KEY,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        name_first VARCHAR(64) NOT NULL,     -- part of name`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        name_last VARCHAR(64) NOT NULL,      -- part of name`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        address_line1 VARCHAR(128) NOT NULL, -- part of address`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        address_line2 VARCHAR(128),          -- part of address`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        address_city VARCHAR(64) NOT NULL,   -- part of address`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        address_state VARCHAR(64) NOT NULL,  -- part of address`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        address_zip VARCHAR(32) NOT NULL,    -- part of address`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        address_phone VARCHAR(32),           -- part of address`<br>`
    )`
* `Room(`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        roomNumber INT PRIMARY KEY,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        type VARCHAR(32) NOT NULL,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        rate NUMERIC(6,2) NOT NULL           -- currency`<br>`
    )`

## School Design
### Domain Description
> Imagine a school that needs to manage courses, students, and enrollments. Each course has a course ID, title, and credits. Students have a student ID, name, and enrollment date. Enrollments have an enrollment ID, enrollment date, and grade. A student can enroll in multiple courses, and each course can have multiple students. Each enrollment is associated with a single student enrolling in a single course.

### Discussion
The description specifies 3 concepts that can be modelled as entities: **Course**, **Enrollment** and **Student**. The basic attributes of each are also described.

The `date` of an `Enrollment`, along with the `enrollmentDate` of a `Student` are both "date" attributes. Also, the `grade` of an `Enrollment` will be a whole number integer (a student's GPA may be a floating point value, but this is derived). The `grade` may also be `NULL` until the course has been completed. The number of `credits` for a `Course` is also an integer, but may not be `NULL`.

As for each representation of a person, the `Student` entity has a composite attribute of `name`, with components of `first` and `last`.

#### Relationships
An `Enrollment` indicates a single `Student` enrolling in a single `Course`. The relation is written from the perspective of the enrollment, with names that are similar to the names of the entities they refer to. The participation of the `Enrollment` is mandatory in both the `student` and `course` relationship, and these refer to the `Student` and `Course` entities with a cardinality of "1-and-only-1".

A `Student` may attend a university without having done any courses yet (particularly in a research-only degree), and they may also do multiple subjects. So the participation of a `Student` in an `Enrollment` is optional, and the cardinality of the reference to the `Enrollment` is "zero-or-many".

A `Course` is presumed to only exist if students sign up to it, since a course without students will be deleted (perhaps a course can be considered to exist without enrollments for the short time it is offered before enrollments start for the semester, but this choice has not been taken here). This choice means that the participation of a `Course` in an `Enrollment` relationship is mandatory, and the cardinality of the reference to the `Enrollment` is "one-or-many".

### School Crow's Foot Diagram
```{mermaid}
---
title: School Crow's Foot Diagram
---
erDiagram
    Enrollment }|--|| Course : course
    Enrollment }o--|| Student : student
    Enrollment {
        int enrollmentID PK
        date date
        int grade
    }
    Course {
        int courseID PK
        string title
        int credits
    }
    Student {
        int studentID PK
        string name_first
        string name_last
        date enrollmentDate
    }
```
See [School Crow's Foot Diagram](https://quoll.github.io/608_ERModels/diagrams/SchoolCF.png) for a more a more standardized view.

### School Chen Diagram
```{dot}
graph ER {
	node [shape=box]; Enrollment; Course; Student;
    node [shape=ellipse]; {node [label="name"] name0;}
		{node [label="*courseID"] courseID;} {node [label="*enrollmentID"] enrollmentID;} {node [label="*studentID"] studentID;} title; credits; date; grade; first; last; enrollmentDate;
    node [shape=diamond,style=filled,color=lightgrey]; {node [label="course"] course0;}; {node [label="student"] student0;};

    courseID -- Course;
    title -- Course;
    credits -- Course;
    Course -- course0;
    Course -- course0 [label="1",len=1.00];
    course0 -- Enrollment;
    course0 -- Enrollment [label="M",len=1.00];
    Enrollment -- enrollmentID;
    Enrollment -- date;
    Enrollment -- grade;
    Enrollment -- student0;
    Enrollment -- student0 [label="M",len=1.00];
    student0 -- Student;
    student0 -- Student  [label="1",len=1.00];
    Student -- studentID;
    Student -- name0;
    name0 -- first;
    name0 -- last;
    Student -- enrollmentDate;
}
```
See [School Chen Diagram](https://quoll.github.io/608_ERModels/diagrams/SchoolChen.png) for a more a more standardized view.

### Schema
* `Enrollment(`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        enrollmentID INT PRIMARY KEY,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        date DATE NOT NULL,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        grade INT,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        student INT NOT NULL REFERENCES Student(studentID),`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        course INT NOT NULL REFERENCES Course(courseID)`<br>`
    )`
* `Student(`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        studentID INT PRIMARY KEY,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        name_first VARCHAR(64) NOT NULL,  -- part of name`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        name_last VARCHAR(64) NOT NULL,   -- part of name`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        enrollmentDate DATE NOT NULL,`<br>`
    )`
* `Course(`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        courseID INT PRIMARY KEY,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        title VARCHAR(64) NOT NULL,`<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`
        credits INT NOT NULL`<br>`
    )`
